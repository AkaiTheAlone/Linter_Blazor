@page "/contasgerenciais/{tipoView:int}/{id:int}"

@rendermode InteractiveServer
@inject CNT001_ContasGerenciaisRepositorio rep
@inject CNT002_ContasExcluidasRepositorio repCancelamento
@inject AuthenticationStateProvider auth
@inject NavigationManager navigation

<h3 class="centralizado"> @txtBotao </h3>

<FluentMenuProvider />
<AuthorizeView Context="authorize">

    <FluentCard Height="200px" AreaRestricted="false">
        <FluentEditForm Model="@Conta" FormName="submit" Context="edit">
            <DataAnnotationsValidator />
            <FluentGrid>
                @if (TipoView != (int)Enumeradores.TipoView.Criar)
                {
                    <FluentGridItem xs="3">
                        <FluentNumberField Label="ID de Usuário" Id="id" Class="label-top" @bind-Value="Conta.idContaGerencial" ReadOnly="true" />
                    </FluentGridItem>
                }

                <FluentGridItem xs="3">
                    <FluentTextField Placeholder="Descrição..." Label="Descrição" Id="descritivo" Class="label-top" @bind-Value="Conta.Descricao" ReadOnly="@Disabled" />
                    <FluentValidationMessage For="@(() => Conta.Descricao)" />
                </FluentGridItem>

                @if (TipoView == (int)Enumeradores.TipoView.Consultar && TipoView == (int)Enumeradores.TipoView.Apagar)
                {
                    <FluentGridItem xs="3">
                        <FluentDatePicker Label="Data de Criação" Name="datepicker" @bind-Value="Conta.DataCadastro" ReadOnly="@Disabled" />
                        <FluentValidationMessage For="@(() => Conta.DataCadastro)" />
                    </FluentGridItem>
                }
                @if (TipoView == (int)Enumeradores.TipoView.Apagar)
                {
                    <br />
                    <FluentGridItem xs="6" sm="12">
                        <FluentTextArea Label="Data da movimentação" Name="datepicker" @bind-Value="MotivoCancelamento" ReadOnly="false" />
                    </FluentGridItem>
                }
            </FluentGrid>
            <br />

            @if (TipoView != (int)Enumeradores.TipoView.Consultar)
            {
                <FluentButton OnClick="@(()=> AcionarBotao())" Type="ButtonType.Submit" FormId="submit" IconStart="IconeBotao"> @txtBotao </FluentButton>
            }
            <FluentButton Type="ButtonType.Button" Disabled="false" OnClick="@(()=> navigation.NavigateTo("/contasgerenciais"))" IconStart="@(new Icons.Regular.Size20.ArrowStepBack())"> Retornar </FluentButton>

        </FluentEditForm>
    </FluentCard>
</AuthorizeView>
@code {
    #region Propriedades
    [Parameter]
    public int TipoView { get; set; }
    [Parameter]
    public int id { get; set; }
    [SupplyParameterFromForm]
    public string MotivoCancelamento { get; set; } = "";
    public CNT001_ContasGerenciais Conta { get; set; } = new CNT001_ContasGerenciais();
    public string txtBotao { get; set; } = "Adicionar Conta Administrativa";
    public bool Disabled { get; set; } = false;
    private ClaimsPrincipal? currentUser;
    private string Username { get; set; }
    public Icon IconeBotao { get; set; }
    #endregion

    protected override void OnInitialized()
    {
        if (TipoView != (int)Enumeradores.TipoView.Criar)
        {
            Conta = rep.RetornaConta(id);
        }
    }
    public void AcionarBotao()
    {
        switch (TipoView)
        {
            case (int)Enumeradores.TipoView.Criar:
                Conta.DataCadastro = DateTime.Now;
                rep.Inserir(Conta);
                Toast.ShowSuccess("Conta adicionada com sucesso!");
                break;
            case (int)Enumeradores.TipoView.Apagar:
                repCancelamento.Inserir(new CNT002_ContasExcluidas
                    {
                        DataExclusao = DateTime.Now,
                        MotivoCancelamento = MotivoCancelamento,
                        DataCadastro = Conta.DataCadastro,
                        Descricao = Conta.Descricao,
                        idContaGerencial = Conta.idContaGerencial,
                        idUsuarioCriador = Conta.idUsuarioCriador,
                        UsuarioExclusao = Username //ver se esse metodo vai funcionar corretamente
                    });
                rep.Remover(Conta);
                Toast.ShowSuccess("Exclusão confirmada com sucesso!");
                break;
            case (int)Enumeradores.TipoView.Editar:
                rep.Atualizar(Conta);
                Toast.ShowSuccess("Edição confirmada com sucesso!");
                break;
        }
        navigation.NavigateTo("/contasgerenciais");
    }

    protected override async Task OnInitializedAsync()
    {
        switch (TipoView)
        {
            case (int)Enumeradores.TipoView.Criar:
                txtBotao = "Criar nova conta";
                IconeBotao = new Icons.Regular.Size20.Save();
                break;

            case (int)Enumeradores.TipoView.Editar:
                txtBotao = "Editar conta";
                IconeBotao = new Icons.Regular.Size20.Edit();

                break;

            case (int)Enumeradores.TipoView.Apagar:
                txtBotao = "Apagar conta";
                IconeBotao = new Icons.Regular.Size20.TrayItemRemove();
                break;
        }

        var authState = await auth.GetAuthenticationStateAsync();
        currentUser = authState.User;

        if (currentUser?.Identity != null && currentUser.Identity.IsAuthenticated)
        {
            Username = currentUser.Identity.Name;
        }
    }
}


