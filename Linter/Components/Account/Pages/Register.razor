@page "/Account/75e11e1087ba6e396e2e2ec41d2f257781dbe39a9d78485bf9e9e91f42a012c46c9dc28720cdcdc15248b7447805deca6d211ddb077e150ed40efb4ba0f06943"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<TAB001_Usuarios> UserManager
@inject IUserStore<TAB001_Usuarios> UserStore
@inject SignInManager<TAB001_Usuarios> SignInManager
@inject IEmailSender<TAB001_Usuarios> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrar</PageTitle>

<h1>Registre o usuário Administrador</h1>

<FluentCard>
    <FluentGrid>
        <FluentGridItem xs="8" sm="4">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <hr />
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Name="Input.Email" @bind-Value="username" AutoComplete="email" Required="true" Placeholder="Nome de usuário..." Label="Nome de Usuário" Style="width: 100%" />
                    <FluentValidationMessage For="() => Input.NomeDeUsuario" class="text-danger" />
                    <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="email" Required="true" Placeholder="email@exemplo.com" Label="Email" Style="width: 100%" />
                    <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                    <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Senha" AutoComplete="new-password" Required="true" Placeholder="Senha..." Label="Senha" Style="width: 100%" />
                    <FluentValidationMessage For="() => Input.Senha" class="text-danger" />
                    <FluentTextField type="password" Name="Input.ConfirmPassword" @bind-Value="Input.ConfirmPassword" AutoComplete="new-password" Required="true" Placeholder="Confirme a senha..." Label="Confirmar Senha" Style="width: 100%" />
                    <FluentValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Entrar</FluentButton>
                </FluentStack>
            </EditForm>
        </FluentGridItem>

    </FluentGrid>
</FluentCard>

@code {
    private string username { get; set; }
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, username, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Senha);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private TAB001_Usuarios CreateUser()
    {
        try
        {
            return Activator.CreateInstance<TAB001_Usuarios>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(TAB001_Usuarios)}'. " +
                $"Ensure that '{nameof(TAB001_Usuarios)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<TAB001_Usuarios> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<TAB001_Usuarios>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress(ErrorMessage = "Defina um nome de usuário válido.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "A senha precisa ter pelo menos 6 caracteres e no máximo 100 caracteres..", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Senha { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Senha", ErrorMessage = "As senhas não coincidem.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Necessário ter um nome de usuário válido")]
        public string NomeDeUsuario { get; set; } = "";
    }
}
