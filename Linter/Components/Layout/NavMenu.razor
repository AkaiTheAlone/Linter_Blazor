@rendermode InteractiveServer
@implements IDisposable
@inject NavigationManager NavigationManager

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Início</FluentNavLink>
            <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="/admin/usuarios" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Person())" IconColor="Color.Accent">Usuários</FluentNavLink>
                    <FluentNavLink Href="/contasgerenciais" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.BuildingBank())" IconColor="Color.Accent">Contas</FluentNavLink>
                    <FluentNavLink Href="/caixa" Icon="@(new Icons.Regular.Size20.Money())"> Movimentações </FluentNavLink>
                    <FluentNavLink Href="/relatorios" Icon="@(new Icons.Regular.Size20.BookCoins())"> Relatórios </FluentNavLink>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <div class="content" style="align-content:center">
                            <FluentButton Type="ButtonType.Submit" IconStart="@(new Icons.Regular.Size20.ArrowCircleLeft())" Style="width:100%;">Logout</FluentButton>
                        </div>
                    </form>
                    <br />
                </Authorized>
                <NotAuthorized>
                    <FluentNavLink Href="Account/Login">Login</FluentNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
