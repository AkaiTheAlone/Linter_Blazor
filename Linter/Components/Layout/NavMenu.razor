@rendermode InteractiveServer
@implements IDisposable
@inject NavigationManager NavigationManager
@inject TAB001_UsuariosRepositorio rep

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Início</FluentNavLink>
            <FluentTooltip Anchor="delay3" @rendermode=InteractiveServer HideTooltipOnCursorLeave="true" Position=TooltipPosition.End Delay=500> Gerenciar usuários (Administrador)</FluentTooltip>
            <AuthorizeView>
                <Authorized>
                    <FluentNavGroup Title="Usuários" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Person())" IconColor="Color.Accent">
                        <FluentNavLink Href="/usuarios" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Person())" IconColor="Color.Accent"> Registrados </FluentNavLink>
                        <FluentNavLink Href="/admin/bloqueados" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.CodeBlock())" IconColor="Color.Accent"> Bloqueados </FluentNavLink>
                    </FluentNavGroup>
                    <FluentNavLink Href="/contasgerenciais" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.BuildingBank())" IconColor="Color.Accent">Contas</FluentNavLink>
                    <FluentTooltip Anchor="delay3" @rendermode=InteractiveServer HideTooltipOnCursorLeave="true" Position=TooltipPosition.End Delay=500> Gerenciar usuários (Administrador)</FluentTooltip>
                    <FluentNavLink Href="/caixa" Icon="@(new Icons.Regular.Size20.Money())"> Movimentações </FluentNavLink>
                    <FluentTooltip Anchor="delay3" @rendermode=InteractiveServer HideTooltipOnCursorLeave="true" Position=TooltipPosition.End Delay=500> Gerenciar movimentações financeiras</FluentTooltip>
                    <FluentNavLink Href="/relatorios" Icon="@(new Icons.Regular.Size20.BookCoins())"> Relatórios </FluentNavLink>
                    <FluentTooltip Anchor="delay3" HideTooltipOnCursorLeave="true" @rendermode=InteractiveServer Position=TooltipPosition.End Delay=500> Imprimir e exportar relatórios </FluentTooltip>

                    <br />
                </Authorized>
                <NotAuthorized>
                    @*a ideia correta eh mostrar o register apenas quando nao tem usuarios registrados
                    imagina se o entity me deixa fazer isso
                    isso aq deveria ser estudado pela nasa
                    se o precisa registrar eh inicializado como false
                    e ele nao entra no if do on Initialized
                    ele mostra aquilo q tem no true e nao no false??????
                    *@
                    @if (Principal.PrecisaRegistrar)
                    {
                        <FluentNavLink Href="/Account/75e11e1087ba6e396e2e2ec41d2f257781dbe39a9d78485bf9e9e91f42a012c46c9dc28720cdcdc15248b7447805deca6d211ddb077e150ed40efb4ba0f06943" Icon="@(new Icons.Regular.Size20.ContactCardRibbon())"> Registrar </FluentNavLink>
                    }
                    else
                    {
                        <FluentNavLink Href="Account/Login" Icon="@(new Icons.Regular.Size20.ContactCardRibbon())"> Login </FluentNavLink>
                    }

                    <FluentTooltip Anchor="delay3" HideTooltipOnCursorLeave="true" Position=TooltipPosition.End Delay=500> Entre na sua conta</FluentTooltip>
                </NotAuthorized>
            </AuthorizeView>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private string? currentUrl;
    protected override void OnInitialized()
    {
        var lista = rep.RetornaTodos().ToList();
        if (rep.RetornaTodos().ToList().Any() == false)
        {
            Principal.PrecisaRegistrar = true;
        }
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
