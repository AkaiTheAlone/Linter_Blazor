@page "/caixa/{acao:int}/{id:int}"
@using Linter.Components.ComponentesLDN
@rendermode InteractiveServer
@inject CAX001_MovimentacoesRepositorio repositorio
@inject NavigationManager navigation


<h3> @txtBotao </h3>

<FluentMenuProvider />

<FluentEditForm Model="@objMovi" FormName="submit" OnValidSubmit="@AcionarBotao">
    <DataAnnotationsValidator />
    <FluentGrid>
        <FluentGridItem xs="3">
            <FluentTextField Placeholder="Descrição..." Label="Descrição" Id="descritivo" Class="label-top" Name="objMovi.Descritivo" @bind-Value="objMovi.Descritivo" ReadOnly="@Disabled" />
            <FluentValidationMessage For="@(() => objMovi.Descritivo)" />
        </FluentGridItem>
        <FluentGridItem xs="3">
            <FluentNumberField Placeholder="Valor..." TValue="decimal" Label="Valor" Name="objMovi.Valor" @bind-Value="objMovi.Valor" ReadOnly="@Disabled" />
            <FluentValidationMessage For="@(() => objMovi.Valor)" />
        </FluentGridItem>
        <FluentGridItem xs="3">
            <FluentDatePicker Label="Data da movimentação" Name="datepicker" @bind-Value="objMovi.DataMovimentacao" ReadOnly="@Disabled" />
            <FluentValidationMessage For="@(() => objMovi.DataMovimentacao)" />
        </FluentGridItem>
    </FluentGrid>

    <FluentRadioGroup Name="tipo" @bind-Value="objMovi.Tipo" Label="Tipo de Movimentação">
        <FluentRadio Value="0"> Entrada </FluentRadio>
        <FluentRadio Value="1"> Saída </FluentRadio>
    </FluentRadioGroup>
    <br />
    <FluentButton OnClick="@(()=> AcionarBotao(context))" Type="ButtonType.Submit" FormId="submit" Disabled="BotoesDisabled" IconStart="@IconeButton"> @txtBotao </FluentButton>

    <FluentButton Type="ButtonType.Button" Disabled="false" OnClick="@(()=> navigation.NavigateTo("/caixa/"))" IconStart="new Icons.Regular.Size20.ArrowCircleLeft()" > Retornar </FluentButton>

</FluentEditForm>
@code {

    public Icon IconeButton { get; set; } = new Icons.Regular.Size16.Save();
    bool BotoesDisabled = false;
    public bool Disabled { get; set; } = false;
    public string txtBotao { get; set; } = "Adicionar movimentação";
    public Enumeradores.TipoMovimentacao? tipomov { get; set; }
    //quando não existe um modelo sendo passado pra essa tela nem carregado no initialized, precisa inicializar ele manualmente
    [SupplyParameterFromForm]
    public CAX001_MovimentacoesCaixa objMovi { get; set; } = new CAX001_MovimentacoesCaixa();

    [Parameter] public int acao { get; set; }

    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CarregarDados();
    }

    private void CarregarDados()
    {
        if (acao != (int)Enumeradores.TipoView.Criar)
        {
            objMovi = repositorio.RetornaMovimentacao(id);
        }
        switch (acao)
        {
            case (int)Enumeradores.TipoView.Criar:
                //aqui poderia mudar a cor do botão e colocar algum icone de lixeira
                IconeButton = new Icons.Regular.Size20.Save();
                txtBotao = "Adicionar movimentação";
                BotoesDisabled = false;
                Disabled = false;
                break;
            case (int)Enumeradores.TipoView.Editar:
                Disabled = false;
                BotoesDisabled = false;
                IconeButton = new Icons.Regular.Size20.Edit();
                //e aq colocar algum icone de lapis
                txtBotao = "Editar movimentação";
                break;
            case (int)Enumeradores.TipoView.Apagar:
                IconeButton = new Icons.Regular.Size20.Delete();
                Disabled = true;
                BotoesDisabled = false;
                //e aq colocar algum icone de lapis
                txtBotao = "Excluir movimentação";
                break;
        }
    }
    public async void AcionarBotao(EditContext editContext)
    {
        if (editContext.Validate())
        {
            switch (acao)
            {
                case (int)Enumeradores.TipoView.Criar:
                    repositorio.InserirMovimentacao(objMovi);
                    Toast.ShowCustom("Registro cadastrado com sucesso!", null, null, null, (new Icons.Regular.Size24.AddCircle(), Color.Accent));
                    break;
                case (int)Enumeradores.TipoView.Editar:
                    await repositorio.EditarMovimentacao(objMovi);
                    Toast.ShowCustom("Registro cadastrado com sucesso!", null, null, null, (new Icons.Regular.Size24.AddCircle(), Color.Accent));
                    break;
                case (int)Enumeradores.TipoView.Apagar:
                    var resultado = await dialog.ShowConfirmationAsync("Tem certeza que deseja cancelar?",
                                                                           "Sim",
                                                                           "Cancelar",
                                                                           "Atenção");
                    var result = await resultado.Result;
                    if (!result.Cancelled)
                    {
                        repositorio.ExcluirMovimentacao(id);
                        await dialog.ShowInfoAsync("Retornando à página principal...",
                                                          "Sucesso");
                        Toast.ShowCustom("Exclusão confirmada com sucesso!", 10000, "100", null, (new Icons.Regular.Size24.Delete(), Color.Accent));
                    }
                    break;
            }
            navigation.NavigateTo($"/caixa");
        }
    }
}
