@page "/caixa/{acao:int}/{id:int}"
@using Linter.Components.ComponentesLDN
@rendermode InteractiveServer
@inject CAX001_MovimentacoesRepositorio repositorio
@inject NavigationManager navigation

<h3> @txtBotao </h3>

<FluentToastProvider RemoveToastsOnNavigation="false"/>
<FluentDialogProvider />
<FluentMenuProvider />


<FluentEditForm Model="@objMovi" FormName="submit" OnValidSubmit="@AcionarBotao">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <FluentGrid>
        <FluentGridItem xs="3">
            <FluentTextField Label="Descrição" Id="descritivo" Class="label-top" Name="objMovi.Descritivo" @bind-Value="objMovi.Descritivo" ReadOnly="@Disabled" />
        </FluentGridItem>
        <FluentGridItem xs="3">
            <FluentNumberField TValue="decimal" Label="Valor" Name="objMovi.Valor" @bind-Value="objMovi.Valor" ReadOnly="@Disabled" />
        </FluentGridItem>
        <FluentGridItem xs="3">
            <FluentDatePicker Label="Data da movimentação" Name="datepicker" @bind-Value="objMovi.DataMovimentacao" ReadOnly="@Disabled" />
        </FluentGridItem>
    </FluentGrid>

    <FluentRadioGroup Name="tipo" @bind-Value="Numero" Label="Tipo de Movimentação" >
        <FluentRadio Value="0"> Entrada </FluentRadio>
        <FluentRadio Value="1"> Saída </FluentRadio>
    </FluentRadioGroup>
    <br />
    <FluentButton OnClick="@(()=> AcionarBotao())" Type="ButtonType.Submit" FormId="submit" Disabled="BotoesDisabled"> @txtBotao </FluentButton>
    <FluentButton Disabled="false" OnClick="@(()=> navigation.NavigateTo("/caixa/"))"> Retornar </FluentButton>
</FluentEditForm>

@code {

    bool BotoesDisabled = false;
    public bool Disabled { get; set; } = false;
    public string txtBotao { get; set; } = "Adicionar movimentação";
    public Enumeradores.TipoMovimentacao? tipomov { get; set; }
    //quando não existe um modelo sendo passado pra essa tela nem carregado no initialized, precisa inicializar ele manualmente
    [SupplyParameterFromForm]
    public CAX001_MovimentacoesCaixa objMovi { get; set; } = new CAX001_MovimentacoesCaixa();

    public int Numero { get; set; }
    [Parameter] public int acao { get; set; }

    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CarregarDados();
    }

    private void CarregarDados()
    {
        if (acao != (int)Enumeradores.TipoView.Criar)
        {
            objMovi = repositorio.RetornaMovimentacao(id);
        }
        switch (acao)
        {
            case (int)Enumeradores.TipoView.Criar:
                //aqui poderia mudar a cor do botão e colocar algum icone de lixeira
                txtBotao = "Adicionar movimentação";
                BotoesDisabled = false;
                Disabled = false;
                break;
            case (int)Enumeradores.TipoView.Editar:
                Disabled = false;
                BotoesDisabled = false;
                //e aq colocar algum icone de lapis
                txtBotao = "Editar movimentação";
                break;
            case (int)Enumeradores.TipoView.Apagar:
                Disabled = true;
                BotoesDisabled = false;
                //e aq colocar algum icone de lapis
                txtBotao = "Excluir movimentação";
                break;
        }
    }
    public async void AcionarBotao()
    {
        switch (acao)
        {
            case (int)Enumeradores.TipoView.Criar:
                repositorio.InserirMovimentacao(objMovi);
                Toast.ShowCustom("Registro cadastrado com sucesso!", null, null, null, (new Icons.Regular.Size24.AddCircle(), Color.Accent));
                break;
            case (int)Enumeradores.TipoView.Editar:
                await repositorio.EditarMovimentacao(objMovi);
                Toast.ShowCustom("Registro cadastrado com sucesso!", null, null, null, (new Icons.Regular.Size24.AddCircle(), Color.Accent));
                break;
            case (int)Enumeradores.TipoView.Apagar:
                var dialog = await dialogservice.ShowConfirmationAsync("Tem certeza que deseja cancelar?",
                                                                       "Sim",
                                                                       "Cancelar",
                                                                       "Atenção");
                var result = await dialog.Result;
                if (!result.Cancelled)
                {
                    repositorio.ExcluirMovimentacao(id);
                    await dialogservice.ShowInfoAsync("Retornando à página principal...",
                                                      "Sucesso");
                    Toast.ShowCustom("Exclusão confirmada com sucesso!", 10000, "100", null, (new Icons.Regular.Size24.Delete(), Color.Accent));
                }
                break;
        }
        navigation.NavigateTo($"/caixa");
    }
}
