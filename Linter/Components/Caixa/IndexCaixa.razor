@page "/caixa"

@using Linter.Components.Geral
@rendermode InteractiveServer
@inject CAX001_MovimentacoesRepositorio repositorio
@inject NavigationManager navigation
@inject ToastService Toast
@inject IDialogService dialogservice

<style>
    .label-top .fluent-textfield__label {
        display: block;
        margin-bottom: 4px;
    }

    .fluent-textfield {
        display: flex;
        flex-direction: column;
    }

    .fluent-textfield__input {
        margin-top: 4px;
    }
</style>

<PageTitle> Controle de movimentações </PageTitle>

<h1> Controle de Movimentações </h1>

@if (queryMov == null)
{
    <h1> Carregando...</h1>
}
else if (queryMov.Count() == 0)
{
    <div class="content" style="align-content:flex-start">
        <h3> Nenhuma movimentação a ser mostrada </h3>
        <FluentDivider />
        <h6> Continue adicionando valores na sua conta para liberar gráficos, estatísticas e muito mais! </h6>

        <FluentButton Style="align-content:center" OnClick="AdicionarMovimentacao"> Adicionar Movimentação </FluentButton>
        <br />
        <img src="/recursos/icones/semregistros.jpg" width="500" height="350" style="align-content:center" />
    </div>
}
else
{
    <FluentMenuProvider />
    <FluentDialogProvider />

    <FluentAppBar Orientation="Orientation.Horizontal">
        <FluentAppBarItem Text="Adicionar" IconRest="@(new Icons.Regular.Size24.AddCircle())" OnClick="AdicionarMovimentacao" />
        <FluentAppBarItem Text="Cancelamentos" IconRest="@(new Icons.Light.Size32.Delete())" OnClick="VerCancelamentos" />
    </FluentAppBar>

    <FluentCard Height="100">
        <FluentDataGrid Items="queryMov"
                        ResizableColumns=false
                        ResizeType="DataGridResizeType.Exact"
                        HeaderCellAsButtonWithMenu="true"
                        ShowHover="true"
                        AutoFit="false">
            <ChildContent>
                <PropertyColumn Width="70px" InitialSortDirection="SortDirection.Descending" Property="@(p=> p.idMovimentacao)" Sortable="true" Title="ID" />
                <PropertyColumn Width="100px" Property="@(p=> Linter.Utilidades.Uteis.PegaNomeDeExibicao((Enumeradores.TipoMovimentacao)p.Tipo))" Title="Tipo Movi." />
                <PropertyColumn Width="100px" Property="@(p=> p.DataMovimentacao)" Format="dd/MM/yyyy" Sortable="true" Title="Data" />
                <PropertyColumn Width="150px" Property="@(p=> p.Valor.ToString("C2"))" Title="Valor" Sortable="false" /> @* sortable não funciona com conversoes, descobrir solucao*@
                <PropertyColumn Width="300px" Property="@(p=> p.Descritivo)" Title="Descrição" Sortable="true" />
                <TemplateColumn Title="Ações" Align="@Align.End" Width="200px">
                    <FluentButton aria-label="Editar" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditarMovimentacao(context.idMovimentacao))" />
                    <FluentButton aria-label="Deletar" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => ExcluirMovimentacao(context.idMovimentacao))" />
                </TemplateColumn>
            </ChildContent>

            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Carregando...<br />
                    <FluentProgress Width="240px" />
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>
    </FluentCard>
}


@code {

    #region Propriedades
    [Parameter]
    public Enumeradores.TipoView tipoView { get; set; }
    Confirmacao confirmacao = new Confirmacao();
    [Parameter] public int idMovimentacao { get; set; } = 0;
    public Enumeradores.TipoMovimentacao? tipomov { get; set; }
    [SupplyParameterFromForm] public CAX001_MovimentacoesCaixa Caixa { get; set; } = new CAX001_MovimentacoesCaixa();
    public IQueryable<CAX001_MovimentacoesCaixa> queryMov;
    #endregion


    protected override async Task<IQueryable> OnInitializedAsync()
    {
        queryMov = repositorio.RetornaMovimentacoes();
        return queryMov;
    }
    public async void AdicionarMovimentacao()
    {
        await Task.Delay(100);
        navigation.NavigateTo($"/caixa/{(int)Enumeradores.TipoView.Criar}/{0}");
    }
    public async Task EditarMovimentacao(int id)
    {
        await Task.Delay(100);
        navigation.NavigateTo($"/caixa/{(int)Enumeradores.TipoView.Editar}/{id}");
    }
    private async Task ExcluirMovimentacao(int id)
    {
        await Task.Delay(100);
        navigation.NavigateTo($"/caixa/{(int)Enumeradores.TipoView.Apagar}/{id}");
    }

    public void VerCancelamentos()
    {
        navigation.NavigateTo("/caixa/cancelamentos");
    }

}
@*ESSE ERRO ESTA APARECENDO AO TENTAR DAR UM SORT NA COLUNA DE VALORES (DECIMAL)

[2024-12-20T12:30:06.891Z] Error: System.InvalidOperationException: The LINQ expression 'DbSet<CAX001_MovimentacaoCaixa>()
    .OrderBy(c => c.Valor.ToString("C2"))' could not be translated. Additional information: Translation of method 'decimal.ToString' failed. I
    f this method can be mapped to your custom function, see https://go.microsoft.com/fwlink/?linkid=2132413 for more information.
    Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable',
    'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()
   at System.Collections.Generic.List`1.AddRange(IEnumerable`1 collection)
   at Microsoft.FluentUI.AspNetCore.Components.FluentDataGrid`1.ResolveItemsRequestAsync(GridItemsProviderRequest`1 request) in /_/src/Core/Components/DataGrid/FluentDataGrid.razor.cs:line 775
   at Microsoft.FluentUI.AspNetCore.Components.FluentDataGrid`1.RefreshDataCoreAsync() in /_/src/Core/Components/DataGrid/FluentDataGrid.razor.cs:line 684
   at Microsoft.FluentUI.AspNetCore.Components.FluentDataGrid`1.RefreshDataAsync() in /_/src/Core/Components/DataGrid/FluentDataGrid.razor.cs:line 658
   at Microsoft.FluentUI.AspNetCore.Components.ColumnBase`1.<RenderDefaultHeaderContent>b__99_5() in /_/src/Core/Components/DataGrid/Columns/ColumnBase.razor:line 53
   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)
   at Microsoft.FluentUI.AspNetCore.Components.FluentMenuItem.OnClickHandlerAsync(MouseEventArgs ev) in /_/src/Core/Components/Menu/FluentMenuItem.razor.cs:line 92
   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)
   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState) *@