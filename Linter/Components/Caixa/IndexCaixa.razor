@page "/caixa"
@rendermode InteractiveServer
@inject Dados.Repositorios.CAX001_MovimentacoesRepositorio repositorio
@inject ToastService Toast
@inject IDialogService dialogservice

@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider authenticate
@inject UserManager<TAB001_Usuarios> usermanager


@* @attribute [Authorize(Roles = "Administrador")] *@
<PageTitle> Controle de movimentações </PageTitle>


<AuthorizeView Context="usuario">
    <Authorized>
        <FluentMenuProvider />
        <div>
            <h2 class="centralizado"> Controle de Movimentações </h2>
        </div>

        <FluentCard MinimalStyle="true" Height="100">
            <FluentAppBar Orientation="Orientation.Horizontal" Class="centralizado">
                <FluentAppBarItem Text="Adicionar" IconRest="@(new Icons.Regular.Size24.AddCircle())" OnClick="@(()=> navigation.NavigateTo($"/caixa/{(int)Enumeradores.TipoView.Criar}/{0}"))" />
                <FluentAppBarItem Text="Cancelamentos" IconRest="@(new Icons.Regular.Size32.Delete())" OnClick="@(()=> navigation.NavigateTo("/caixa/cancelamentos"))" />
            </FluentAppBar>
            <FluentDataGrid Items="lstFiltrada"
                            ResizableColumns=false
                            HeaderCellAsButtonWithMenu="false"
                            ShowHover="true"
                            AutoFit="false"
                            Pagination="pagination"
                            RowSize="DataGridRowSize.Medium">
                <EmptyContent>
                    <FluentIcon Value="@(new Icons.Filled.Size16.CalendarEmpty())" Color="@Color.Accent" />&nbsp; Nenhum registro para ser exibido!
                </EmptyContent>
                <ChildContent>
                    <PropertyColumn InitialSortDirection="SortDirection.Descending" Property="@(p=> p.idMovimentacao)" Sortable="true" Title="ID" IsDefaultSortColumn="true">
                        @*  <ColumnOptions>
                        <div class="search-box">
                        <FluentSearch type="search" Autofocus=true Placeholder="ID..." @bind-Value=idFiltro @oninput="Filtrar" @bind-Value:after="Limpar" />
                        </div>
                        </ColumnOptions>
                        tenho q descobrir como fazer um filtro combinado dps
                        *@
                    </PropertyColumn>

                    <PropertyColumn Width="50" Property="@(p=> Linter.Utilidades.Uteis.PegaNomeDeExibicao((Enumeradores.TipoMovimentacao)p.Tipo))" Title="Tipo Movi." Align="Align.Start" />
                    <PropertyColumn Property="@(p=> p.DataMovimentacao)" Format="dd/MM/yyyy" Sortable="true" Title="Data" Align="Align.Start" />
                    <PropertyColumn Property="@(p=> p.Valor.ToString("C2"))" Title="Valor" Sortable="false" /> @* sortable não funciona com conversoes, descobrir solucao*@
                    <PropertyColumn Property="@(p=> p.Descritivo)" Title="Descrição" Sortable="@usuario.User.IsInRole("ADMINISTRADOR")">
                        <ColumnOptions>
                            <div class="search-box">
                                <FluentSearch type="search" Autofocus=true Placeholder="ID..." @bind-Value=nomeFiltro @oninput="Filtrar" @bind-Value:after="Limpar" />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>

                    <TemplateColumn Title="Ações" Context="mov">
                        <AuthorizeButton Action="@(() => navigation.NavigateTo($"/caixa/{(int)Enumeradores.TipoView.Editar}/{mov.idMovimentacao}"))" Icone="@(new Icons.Regular.Size16.Edit())" Titulo="Editar"></AuthorizeButton>
                        <AuthorizeButton Action="@(() => navigation.NavigateTo($"/caixa/{(int)Enumeradores.TipoView.Apagar}/{mov.idMovimentacao}"))" Icone="@(new Icons.Regular.Size16.Delete())" Titulo="Excluir"></AuthorizeButton>
                    </TemplateColumn>
                </ChildContent>

                <LoadingContent>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                        Carregando...<br />
                        <FluentProgress Width="240px" />
                    </FluentStack>
                </LoadingContent>

            </FluentDataGrid>

            Saldo Total = <strong style="color:@Cor">
                @Saldo.ToString("C2")
            </strong>
            <FluentDivider />

        </FluentCard>

        <LDN_Paginator Pagination="pagination" strTipo="movimentações" />
    </Authorized>
    <NotAuthorized>
        <NaoAutorizado />
    </NotAuthorized>
</AuthorizeView>

@code {
    #region Propriedades
    public string Cor { get; set; } = "green";
    public decimal Saldo { get; set; }
    [Parameter]
    public Enumeradores.TipoView tipoView { get; set; }
    [Parameter] public int idMovimentacao { get; set; } = 0;
    public Enumeradores.TipoMovimentacao? tipomov { get; set; }
    [SupplyParameterFromForm] public Modelos.Modelos.CAX001_Movimentacoes Caixa { get; set; } = new Modelos.Modelos.CAX001_Movimentacoes();
    public IQueryable<CAX001_Movimentacoes> queryMov;
    IQueryable<CAX001_Movimentacoes>? lstFiltrada => queryMov?.Where(x => x.Descritivo.ToUpper().Contains(nomeFiltro.ToUpper()));

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public bool Autorizado { get; set; }
    string nomeFiltro = "";
    #endregion

    protected override async Task<IQueryable> OnInitializedAsync()
    {
        queryMov = repositorio.RetornaMovimentacoes();

        foreach (var mov in queryMov)
        {
            if (mov.Tipo == (int)Enumeradores.TipoMovimentacao.Entrada)
                Saldo += mov.Valor;
            else
                Saldo -= mov.Valor;
        }
        if (Saldo < 0) Cor = "red";


        var authstate = await authenticate.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        return queryMov;
    }

    private void Filtrar(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nomeFiltro = value;
        }

    }

    private void Limpar()
    {
        if (string.IsNullOrWhiteSpace(nomeFiltro))
        {
            nomeFiltro = string.Empty;
        }
    }

    public class StringLengthComparer : IComparer<string>
    {
        public static readonly StringLengthComparer Instance = new StringLengthComparer();

        public int Compare(string? x, string? y)
        {
            if (x is null)
            {
                return y is null ? 0 : -1;
            }

            if (y is null)
            {
                return 1;
            }

            return x.Length.CompareTo(y.Length);
        }

    }
    private async Task EstaAutorizado(AuthenticationState state)
    {
        try
        {
            var user = await usermanager.GetUserAsync(state.User);

            var roles = usermanager.GetRolesAsync(user).Result;

            //KKKKKKKKKKKKKKKKKKKK NADA FUNCIONA NESSE FRAMEWORK CARA
            //essa funcao horrivel ta dando timeout de tao mal feito q é
            await usermanager.IsInRoleAsync(user, "Administrador");

            if (roles.Contains("Administrador"))
                Autorizado = true;
            else
                Autorizado = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        navigation.Refresh();
    }



    @*ESSE ERRO ESTA APARECENDO AO TENTAR DAR UM SORT NA COLUNA DE VALORES (DECIMAL)

[2024-12-20T12:30:06.891Z] Error: System.InvalidOperationException: The LINQ expression 'DbSet<CAX001_MovimentacaoCaixa>()
    .OrderBy(c => c.Valor.ToString("C2"))' could not be translated. Additional information: Translation of method 'decimal.ToString' failed. I
    f this method can be mapped to your custom function, see https://go.microsoft.com/fwlink/?linkid=2132413 for more information.
    Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable',
    'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.
   at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)
   at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass9_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult](Expression expression)
   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1.GetEnumerator()
   at System.Collections.Generic.List`1.AddRange(IEnumerable`1 collection)
   at Microsoft.FluentUI.AspNetCore.Components.FluentDataGrid`1.ResolveItemsRequestAsync(GridItemsProviderRequest`1 request) in /_/src/Core/Components/DataGrid/FluentDataGrid.razor.cs:line 775
   at Microsoft.FluentUI.AspNetCore.Components.FluentDataGrid`1.RefreshDataCoreAsync() in /_/src/Core/Components/DataGrid/FluentDataGrid.razor.cs:line 684
   at Microsoft.FluentUI.AspNetCore.Components.FluentDataGrid`1.RefreshDataAsync() in /_/src/Core/Components/DataGrid/FluentDataGrid.razor.cs:line 658
   at Microsoft.FluentUI.AspNetCore.Components.ColumnBase`1.<RenderDefaultHeaderContent>b__99_5() in /_/src/Core/Components/DataGrid/Columns/ColumnBase.razor:line 53
   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)
   at Microsoft.FluentUI.AspNetCore.Components.FluentMenuItem.OnClickHandlerAsync(MouseEventArgs ev) in /_/src/Core/Components/Menu/FluentMenuItem.razor.cs:line 92
   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)
   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState) *@
}
