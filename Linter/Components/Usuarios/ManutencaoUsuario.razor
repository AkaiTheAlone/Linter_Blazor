@page "/usuarios/{tipoView:int}/{id:int}"
@inject NavigationManager navigation
@using Microsoft.AspNetCore.Identity
@inject TAB001_UsuariosRepositorio rep
@rendermode InteractiveServer

<h3>@btnString</h3>

<FluentMenuProvider />


<FluentEditForm Model="Usuario">
    <FluentCard Height="400" Width="600" style="padding: 1.5rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 8px;" MinimalStyle="true">
        <FluentTabs>
            <FluentTab Label="Usuário">
                <FluentGrid>
                    <FluentGridItem>
                        <FluentTextField Placeholder="Nome do Usuário..." Label="Nome do Usuário" @bind-Value="Usuario.UserName" style="width: 100%;" />
                        <FluentValidationMessage For="@(() => Usuario.UserName)" />
                    </FluentGridItem>
                    <FluentGridItem>
                        <FluentTextField Placeholder="Senha..." Label="Senha" @bind-Value="Usuario.PasswordHash" style="width: 100%;" />
                        <FluentValidationMessage For="@(() => Usuario.UserName)" />
                    </FluentGridItem>
                    <FluentGridItem>
                        <FluentTextField Placeholder="Email..." Label="Email" @bind-Value="Usuario.Email" style="width: 100%;" />
                        <FluentValidationMessage For="@(() => Usuario.Email)" />
                    </FluentGridItem>
                    <FluentGridItem>
                        <FluentTextField Placeholder="Telefone..." Label="Número de Telefone" @bind-Value="Usuario.PhoneNumber" style="width: 100%;" />
                        <FluentValidationMessage For="@(() => Usuario.PhoneNumber)"> </FluentValidationMessage>
                    </FluentGridItem>

                    @* <FluentCombobox TOption="Enumeradores.TipoUsuario" @bind-Value="Role" Label="Tipo de Usuário" style="width: 100%;">

                    </FluentCombobox> *@
                </FluentGrid>
            </FluentTab>

            <!-- aba de endereço -->
            <FluentTab Label="Endereço">
                <FluentGrid>
                    <FluentGridItem>
                        <FluentTextField Placeholder="Rua..." Label="Rua" @bind-Value="Usuario.Rua" style="width: 100%;" />
                    </FluentGridItem>
                    <FluentGridItem>

                        tenho q descobrir como passar esses enumeradores aqui tbm
                        @* <FluentCombobox TOption="Enumeradores.Cidades" Items="Cidades" @bind-Value="Usuario.Cidade" Label="Selecione a Cidade" style="width: 100%;">
                        </FluentCombobox> *@
                    </FluentGridItem>
                </FluentGrid>
            </FluentTab>

            <FluentTab Label="Permissões">

                PRECISO DESCOBRIR COMO IMPLEMENTAR AS CLAIMS AQUI NESSA TELA

                <FluentTextField>

                </FluentTextField>


            </FluentTab>
        </FluentTabs>
    </FluentCard>
    <br />
    <FluentButton IconStart="new Icons.Regular.Size20.Save()" OnClick="@(() => AcionarBotao(context))"> Adicionar Usuário </FluentButton>
    <FluentButton Type="ButtonType.Button" Disabled="false" OnClick="@Retornar" IconStart="new Icons.Regular.Size20.ArrowCircleLeft()"> Retornar </FluentButton>
</FluentEditForm>
<br />

@code {
    [Parameter]
    public Enumeradores.TipoView tipoView { get; set; }
    public Enumeradores.Cidades Cidades { get; set; }
    public Claim ClaimTeste { get; set; }
    public List<Claim> Claims { get; set; }
    public List<string> RolesParticipantes { get; set; }
    [Parameter]
    public int id { get; set; } = 0;
    public string btnString { get; set; } = "";
    [SupplyParameterFromForm]


    public Icon IconeButton { get; set; } = new Icons.Regular.Size16.Save();
    bool BotoesDisabled = false;
    public bool Disabled { get; set; } = false;
    public string txtBotao { get; set; } = "Adicionar movimentação";
    public Enumeradores.TipoMovimentacao? tipomov { get; set; }


    public TAB001_Usuarios Usuario { get; set; } = new TAB001_Usuarios();

    protected async override Task OnInitializedAsync()
    {
        CarregaDados();
    }

    private void Retornar()
    {
        navigation.NavigateTo("/usuarios/");
    }

    public void CarregaDados()
    {
        if (tipoView != (int)Enumeradores.TipoView.Criar)
        {
            Usuario = rep.RetornaUm(id);
        }
        switch ((int)tipoView)
        {
            case (int)Enumeradores.TipoView.Criar:
                IconeButton = new Icons.Regular.Size20.Save();
                txtBotao = "Adicionar movimentação";
                BotoesDisabled = false;
                Disabled = false;
                break;
            case (int)Enumeradores.TipoView.Editar:
                Disabled = false;
                BotoesDisabled = false;
                IconeButton = new Icons.Regular.Size20.Edit();
                txtBotao = "Editar movimentação";
                break;
            case (int)Enumeradores.TipoView.Apagar:
                IconeButton = new Icons.Regular.Size20.Delete();
                Disabled = true;
                BotoesDisabled = false;
                txtBotao = "Excluir movimentação";
                break;
        }
    }

    public async Task AcionarBotao(EditContext editContext)
    {
        if (editContext.Validate())
        {
            switch (tipoView)
            {
                case Enumeradores.TipoView.Criar:
                    await rep.InserirUsuario(Usuario, RolesParticipantes, Claims);
                    break;

                case Enumeradores.TipoView.Editar:
                    await rep.AtualizarUsuario(Usuario, RolesParticipantes);
                    break;

                case Enumeradores.TipoView.Apagar:
                    await rep.RemoverUsuario(Usuario, RolesParticipantes, Claims);
                    break;
            }
        }

    }

}
