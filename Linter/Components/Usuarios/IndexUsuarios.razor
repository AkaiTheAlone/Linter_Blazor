@page "/usuarios"

@inject TAB001_UsuariosRepositorio repositorio
@inject NavigationManager navigations


@rendermode InteractiveServer
<FluentMenuProvider />
<AuthorizeView Context="contexto">
    <Authorized>
        <div class="titulo">
            <h2 class="centralizado">Usuários registrados</h2>
        </div>

        <FluentCard Height="100" MinimalStyle="true">
            <FluentAppBar Orientation="Orientation.Horizontal" Class="centralizado">
                <FluentAppBarItem Text="Adicionar" IconRest="@(new Icons.Light.Size32.PeopleAdd())" OnClick="@(() => navigations.NavigateTo($"/usuarios/{(int)Enumeradores.TipoView.Criar}/{0}"))" />
                <FluentAppBarItem Text="Bloqueados" IconRest="@(new Icons.Light.Size32.LockClosed())" OnClick="@(()=> navigations.NavigateTo("/admin/bloqueados"))" />
            </FluentAppBar>
            <FluentDataGrid Items="queryUser"
                            ResizableColumns=false
                            HeaderCellAsButtonWithMenu="false"
                            ShowHover="true"
                            AutoFit="false"
                            Pagination="pagination"
                            RowSize="DataGridRowSize.Medium">
                <ChildContent>
                    <PropertyColumn InitialSortDirection="SortDirection.Descending" Property="@(p=> p.Id)" Sortable="true" Title="ID" Align="Align.Center" />
                    <PropertyColumn Property="@(p=> Linter.Utilidades.Uteis.PegaNomeDeExibicao((Enumeradores.TipoUsuario)p.TipoUsuario))" Title="Tipo Usuário." />
                    <PropertyColumn Property="@(p=> p.UserName)" Sortable="true" Title="Nome de Usuário" />
                    <PropertyColumn Property="@(p=> p.Email)" Title="Email" Sortable="true" />

                    <AuthorizeView Roles="Administrator" Context="AutContext">
                        <Authorized>
                            <TemplateColumn Title="Ações" Align="@Align.End" Width="200px">
                                <FluentButton aria-label="Editar" IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => navigations.NavigateTo($"usuarios/{(int)Enumeradores.TipoView.Editar}/{context.Id}"))" />
                                <FluentButton aria-label="Deletar" IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => navigations.NavigateTo($"usuarios/{(int)Enumeradores.TipoView.Apagar}/{context.Id}"))" />
                            </TemplateColumn>
                        </Authorized>
                        <NotAuthorized />
                    </AuthorizeView>
                </ChildContent>

                <LoadingContent>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                        Carregando...<br />
                        <FluentProgress Width="240px" />
                    </FluentStack>
                </LoadingContent>
            </FluentDataGrid>
        </FluentCard>

        <LDN_Paginator Pagination="pagination" strTipo="usuários"> </LDN_Paginator>

    </Authorized>
    <NotAuthorized>
        <NaoAutorizado />
    </NotAuthorized>


</AuthorizeView>
@code {
    IQueryable<TAB001_Usuarios> queryUser { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override async Task OnInitializedAsync()
    {
        queryUser = repositorio.RetornaTodos();
    }
}
